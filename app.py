from datetime import datetime, date, time, timedelta
import uuid
import pandas as pd
import streamlit as st
import gspread
import altair as alt
from gspread_dataframe import get_as_dataframe, set_with_dataframe

# ---- PERMANENS DARK MODE ----
st.markdown("""
    <style>
      .stApp, body, .css-18e3th9 { background-color: #121212 !important; color: #e0e0e0 !important; }
      .stButton>button, .stSelectbox>div>div, .stTextInput>div>div>input,
      .stDateInput>div>div>div>input {
        background-color: #1e1e1e !important; color: #e0e0e0 !important; border: 1px solid #333 !important;
      }
      .css-1d391kg.sidebar-content { background-color: #181818 !important; }
      .stDataFrame, .stBarChart, .stLineChart, .stAreaChart { background-color: #121212 !important; }
      ::-webkit-scrollbar { width: 8px; }
      ::-webkit-scrollbar-thumb { background: #333; border-radius: 4px; }
      ::-webkit-scrollbar-track { background: #121212; }
    </style>
""", unsafe_allow_html=True)

# ---- Google Sheets config & constants ----
GOOGLE_SHEET_ID     = "1xGeEqZ0Y-o7XEIR0mOBvgvTk7FVRzz7TTGRKrSCy6Uo"
GOOGLE_JSON         = "mystic-fountain-300911-9b2c042063fa.json"
ADMIN_PW            = "almakaki"
START_TIME          = time(9,0)
END_TIME            = time(20,30)
DEFAULT_BREAK_MIN   = 10
DEFAULT_LUNCH_START = time(12,0)
DEFAULT_LUNCH_DUR   = 45  # perc

@st.cache_resource
def get_gspread_client():
    return gspread.service_account(filename=GOOGLE_JSON)

# ---- DataFrame bet√∂lt≈ëk ----
@st.cache_data(ttl=60)
def load_bookings_df():
    ws = get_gspread_client().open_by_key(GOOGLE_SHEET_ID).worksheet("Foglal√°sok")
    df = get_as_dataframe(ws, evaluate_formulas=True).dropna(how="all").fillna("")
    if "D√°tum" in df.columns:
        df["D√°tum"] = pd.to_datetime(df["D√°tum"]).dt.date
    return df

@st.cache_data(ttl=60)
def load_users_df():
    sh = get_gspread_client().open_by_key(GOOGLE_SHEET_ID)
    for name in ("Felhaszn√°l√≥k","Felhasznalok"):
        try:
            ws = sh.worksheet(name)
            break
        except gspread.exceptions.WorksheetNotFound:
            ws = None
    if ws is None:
        ws = sh.add_worksheet("Felhaszn√°l√≥k", rows=100, cols=2)
        ws.append_row(["username","password"])
    df = get_as_dataframe(ws, evaluate_formulas=True).dropna(how="all").fillna("")
    return df

@st.cache_data(ttl=60)
def load_blocked_df():
    sh = get_gspread_client().open_by_key(GOOGLE_SHEET_ID)
    try:
        ws = sh.worksheet("TiltottNapok")
    except gspread.exceptions.WorksheetNotFound:
        ws = sh.add_worksheet("TiltottNapok", rows=100, cols=1)
        ws.append_row(["D√°tum"])
    df = get_as_dataframe(ws, evaluate_formulas=True).dropna(how="all").fillna("")
    if "D√°tum" in df.columns:
        df["D√°tum"] = pd.to_datetime(df["D√°tum"]).dt.date
    return df

@st.cache_data(ttl=300)
def load_settings_df():
    sh = get_gspread_client().open_by_key(GOOGLE_SHEET_ID)
    try:
        ws = sh.worksheet("Beallitasok")
    except gspread.exceptions.WorksheetNotFound:
        ws = sh.add_worksheet("Beallitasok", rows=10, cols=2)
        ws.append_rows([
            ["lunch_start","12:00"],
            ["lunch_dur","45"],
            ["break_min","10"]
        ])
    df = get_as_dataframe(ws, evaluate_formulas=True).dropna(how="all").fillna("")
    df.columns = ["Key","Value"]
    return df

@st.cache_data(ttl=60)
def load_lunch_overrides_df():
    sh = get_gspread_client().open_by_key(GOOGLE_SHEET_ID)
    try:
        ws = sh.worksheet("Eb√©dSzunet")
    except gspread.exceptions.WorksheetNotFound:
        ws = sh.add_worksheet("Eb√©dSzunet", rows=100, cols=3)
        ws.append_row(["D√°tum","Kezdes","HosszPerc"])
    df = get_as_dataframe(ws, evaluate_formulas=True).dropna(how="all").fillna("")
    if not df.empty:
        df["D√°tum"]     = pd.to_datetime(df["D√°tum"]).dt.date
        df["Kezdes"]    = pd.to_datetime(df["Kezdes"]).dt.time
        df["HosszPerc"] = df["HosszPerc"].astype(int)
    return df

# ---- Ment≈ë- √©s ment≈ëf√ºggv√©nyek ----
def save_df_to_sheet(df: pd.DataFrame, sheet_name: str):
    ws = get_gspread_client().open_by_key(GOOGLE_SHEET_ID).worksheet(sheet_name)
    ws.clear()
    set_with_dataframe(ws, df, include_index=False)

def save_settings_df(df: pd.DataFrame):
    save_df_to_sheet(df, "Beallitasok")

def safe_rerun():
    try: st.experimental_rerun()
    except: pass

# ---- ICS gener√°tor ----
def generate_ics(df: pd.DataFrame):
    lines = ["BEGIN:VCALENDAR","VERSION:2.0","PRODID:-//Lovarda Foglal√≥//EN"]
    for _,r in df.iterrows():
        dtstart = datetime.combine(r["D√°tum"], datetime.strptime(r["Kezd√©s"],"%H:%M").time())
        dtend   = dtstart + timedelta(minutes=int(r["Id≈ëtartam (perc)"]))
        uid     = uuid.uuid4()
        lines += [
            "BEGIN:VEVENT",
            f"UID:{uid}",
            f"DTSTAMP:{datetime.utcnow():%Y%m%dT%H%M%SZ}",
            f"DTSTART:{dtstart:%Y%m%dT%H%M%S}",
            f"DTEND:{dtend:%Y%m%dT%H%M%S}",
            f"SUMMARY:Lovarda foglal√°s ({r['Gyermek(ek) neve']})",
            "END:VEVENT"
        ]
    lines.append("END:VCALENDAR")
    return "\r\n".join(lines)

# ---- Session init: glob√°lis be√°ll√≠t√°sok fallback-kel ----
raw = load_settings_df().set_index("Key")["Value"].to_dict()
lunch_start_str = raw.get("lunch_start", DEFAULT_LUNCH_START.strftime("%H:%M"))
lunch_dur_str   = raw.get("lunch_dur",   str(DEFAULT_LUNCH_DUR))
break_min_str   = raw.get("break_min",   str(DEFAULT_BREAK_MIN))

if "lunch_start" not in st.session_state:
    st.session_state["lunch_start"] = datetime.strptime(lunch_start_str,"%H:%M").time()
if "lunch_dur" not in st.session_state:
    st.session_state["lunch_dur"]   = int(lunch_dur_str)
if "break_min" not in st.session_state:
    st.session_state["break_min"]   = int(break_min_str)
for k in ("role","auth","user"):
    if k not in st.session_state:
        st.session_state[k] = None

st.title("üê¥ Lovarda Id≈ëpontfoglal√≥")

# ---- Szerepkiv√°laszt√°s ----
if st.session_state.role is None:
    st.write("**V√°lassz szerepet:**")
    c1,c2 = st.columns(2)
    if c1.button("Lovas"):
        st.session_state.role="rider"; safe_rerun()
    if c2.button("Admin"):
        st.session_state.role="admin"; safe_rerun()
    st.stop()

# ---- Auth ----
if not st.session_state.auth:
    if st.session_state.role=="rider":
        dfu = load_users_df()
        st.subheader("Lovas bejelentkez√©s")
        uname = st.text_input("Felhaszn√°l√≥n√©v")
        pwd   = st.text_input("Jelsz√≥", type="password")
        if st.button("Bejelentkez√©s lovask√©nt"):
            if ((dfu["username"]==uname)&(dfu["password"]==pwd)).any():
                st.session_state.auth=True
                st.session_state.user=uname
                safe_rerun()
            else:
                st.error("Hib√°s bel√©p√©s.")
    else:
        st.subheader("Admin bejelentkez√©s")
        pwd = st.text_input("Jelsz√≥", type="password")
        if st.button("Bejelentkez√©s admink√©nt"):
            if pwd==ADMIN_PW:
                st.session_state.auth=True; safe_rerun()
            else:
                st.error("Hib√°s jelsz√≥.")
    st.stop()

# ---- D√°tum √©s tiltott napok ----
sel_date = st.date_input("D√°tum kiv√°laszt√°sa")
wd, mo   = sel_date.weekday(), sel_date.month
if mo==7 and wd not in (0,1):
    st.warning("J√∫liusban csak h√©tf≈ë‚Äìkedd foglalhat√≥."); st.stop()
elif mo==8 and wd==0:
    st.warning("Augusztusban csak kedd‚Äìvas√°rnap foglalhat√≥."); st.stop()
blocked    = load_blocked_df()
if st.session_state.role=="rider" and sel_date in blocked["D√°tum"].tolist():
    st.warning("‚ùå Ezen a napon nem lehet foglalni."); st.stop()

bookings_df   = load_bookings_df()
lunch_over_df = load_lunch_overrides_df()

# ---- Slot gener√°l√°s ----
def get_free_slots(duration):
    slots = []
    cur   = datetime.combine(sel_date, START_TIME)
    odf   = lunch_over_df[lunch_over_df["D√°tum"]==sel_date]
    if not odf.empty:
        ls = odf.iloc[0]["Kezdes"]; ld = int(odf.iloc[0]["HosszPerc"])
    else:
        ls = st.session_state["lunch_start"]; ld = st.session_state["lunch_dur"]
    lunch_end = (datetime.combine(sel_date, ls) + timedelta(minutes=ld)).time()
    break_min = st.session_state["break_min"]
    today     = bookings_df[bookings_df["D√°tum"]==sel_date]
    last_start= (datetime.combine(sel_date, END_TIME) - timedelta(minutes=duration)).time()

    while cur.time() <= last_start:
        if ls <= cur.time() < lunch_end:
            cur += timedelta(minutes=ld)
            continue
        stime = cur.time()
        end_dt= cur + timedelta(minutes=duration)
        etime = end_dt.time()
        conflict=False
        for _,r in today.iterrows():
            bs = datetime.combine(sel_date, datetime.strptime(r["Kezd√©s"], "%H:%M").time())
            be = bs + timedelta(minutes=int(r["Id≈ëtartam (perc)"]))
            if cur < be and bs < end_dt:
                conflict=True; break
        if not conflict:
            slots.append((stime, etime))
        cur += timedelta(minutes=duration + break_min)
    return slots

# ---- Rider n√©zet ----
if st.session_state.role=="rider":
    st.subheader(f"√údv, {st.session_state.user}!")
    names = st.text_input("Gyermek(ek) neve(i), vessz≈ëvel elv√°lasztva", value=st.session_state.user)
    dur   = st.selectbox("Id≈ëtartam (perc)", [30,60,90])
    free  = get_free_slots(dur)
    if not free:
        st.info("Nincs szabad id≈ëpont.")
    else:
        for i,(s,e) in enumerate(free):
            c1,c2 = st.columns([1,1])
            label = f"{s.strftime('%H:%M')}‚Äì{e.strftime('%H:%M')}"
            # sima Foglal√°s
            if c1.button(f"Foglal {label}", key=f"bk{i}"):
                new = {
                    "D√°tum":sel_date, "Gyermek(ek) neve":names,
                    "Lovak":"", "Kezd√©s":s.strftime("%H:%M"),
                    "Id≈ëtartam (perc)":dur,"F≈ë":1,
                    "Ism√©tl≈ëdik":False, "RepeatGroupID":"", "Megjegyz√©s":""
                }
                bookings_df = pd.concat([bookings_df, pd.DataFrame([new])], ignore_index=True)
                save_df_to_sheet(bookings_df, "Foglal√°sok")
                st.success("Foglal√°s sikeres!"); safe_rerun()

            # √ñr√∂k√≠t√©s gomb: heti ism√©tl√©s a k√∂vetkez≈ë √©vre
            if c2.button(f"√ñr√∂k√≠t√©s {label}", key=f"orok{i}"):
                future = pd.date_range(
                    start=sel_date + timedelta(weeks=1),
                    end=sel_date + timedelta(days=365),
                    freq='7D'
                ).date
                conflicts = [d for d in future
                             if ((bookings_df["D√°tum"]==d)&
                                 (bookings_df["Kezd√©s"]==s.strftime("%H:%M"))).any()]
                if conflicts:
                    st.warning(f"√útk√∂z√©s: m√°r foglalt napok: {', '.join(map(str,conflicts))}")
                new_entries = []
                for d in future:
                    if d not in conflicts:
                        new_entries.append({
                            "D√°tum": d,
                            "Gyermek(ek) neve": names,
                            "Lovak":"",
                            "Kezd√©s": s.strftime("%H:%M"),
                            "Id≈ëtartam (perc)": dur,
                            "F≈ë": 1,
                            "Ism√©tl≈ëdik": True,
                            "RepeatGroupID": f"orok{i}",
                            "Megjegyz√©s": "√∂r√∂k√≠t√©s"
                        })
                if new_entries:
                    bookings_df = pd.concat([bookings_df, pd.DataFrame(new_entries)], ignore_index=True)
                    save_df_to_sheet(bookings_df, "Foglal√°sok")
                    st.success("√ñr√∂k√≠t√©s lefuttatva az elk√∂vetkez≈ë √©vre!"); safe_rerun()

    # saj√°t foglal√°sok ICS
    mask = (
        bookings_df["Gyermek(ek) neve"]
        .fillna("")
        .astype(str)
        .str.contains(st.session_state.user, case=False, na=False)
    )
    my_df = bookings_df[mask]
    if not my_df.empty:
        ics = generate_ics(my_df)
        st.download_button("ICS export (saj√°t)", data=ics,
                           file_name="sajat_foglalasok.ics", mime="text/calendar")
    st.stop()

# ---- Admin n√©zet ----
st.subheader("üõ†Ô∏è Admin fel√ºlet")
menu = st.radio("Men√º", ["Foglal√°sok","Felhaszn√°l√≥k","Statisztika","Be√°ll√≠t√°sok","Napt√°r"])

if menu=="Foglal√°sok":
    st.markdown("### Heti foglal√°sok")
    wn  = sel_date.isocalendar()[1]
    wdf = bookings_df[bookings_df["D√°tum"].apply(lambda d:d.isocalendar()[1])==wn]
    if wdf.empty:
        st.info("Nincs foglal√°s ezen a h√©ten.")
    else:
        for idx,r in wdf.iterrows():
            st.write(f"**{r['D√°tum']} {r['Kezd√©s']}** ‚Äì {r['Gyermek(ek) neve']} ({r['Id≈ëtartam (perc)']}p)")
            c1,c2,c3 = st.columns([1,1,1])
            # egyedi sor t√∂rl√©se
            if c1.button("‚ùå T√∂rl√©s", key=f"del{idx}"):
                bookings_df = bookings_df.drop(idx)
                save_df_to_sheet(bookings_df,"Foglal√°sok"); safe_rerun()
            # √°thelyez√©s
            if st.session_state.get("edit_idx")!=idx:
                if c2.button("‚Üª √Åthelyez", key=f"mv{idx}"):
                    st.session_state["edit_idx"]=idx
                    st.session_state["new_time"]=datetime.strptime(r["Kezd√©s"],"%H:%M").time()
                    safe_rerun()
            else:
                nt = c2.time_input("√öj kezd√©s", value=st.session_state["new_time"], key=f"time{idx}")
                if c2.button("Ment√©s", key=f"save{idx}"):
                    bookings_df.at[idx,"Kezd√©s"]=nt.strftime("%H:%M")
                    save_df_to_sheet(bookings_df,"Foglal√°sok")
                    del st.session_state["edit_idx"]; safe_rerun()
            # Stop ism√©tl√©s, ha RepeatGroupID van
            rg = r.get("RepeatGroupID","")
            if rg:
                if c3.button("‚Ü∫ Stop ism√©tl√©s", key=f"stop{idx}"):
                    bookings_df = bookings_df[~(
                        (bookings_df["RepeatGroupID"]==rg) &
                        (bookings_df["D√°tum"]>=sel_date)
                    )]
                    save_df_to_sheet(bookings_df,"Foglal√°sok")
                    st.success("Ism√©tl√©s le√°ll√≠tva innen!"); safe_rerun()
    # teljes ICS export
    ics_all = generate_ics(bookings_df)
    st.download_button("ICS export (√∂sszes)", data=ics_all,
                       file_name="osszes_foglalas.ics", mime="text/calendar")

elif menu=="Felhaszn√°l√≥k":
    dfu = load_users_df()
    st.dataframe(dfu)
    nu  = st.text_input("√öj felhaszn√°l√≥")
    npw = st.text_input("√öj jelsz√≥", type="password")
    if st.button("Regisztr√°l√°s"):
        dfu = pd.concat([dfu, pd.DataFrame([{"username":nu,"password":npw}])], ignore_index=True)
        save_df_to_sheet(dfu,"Felhaszn√°l√≥k"); st.success("Felhaszn√°l√≥ hozz√°adva!"); safe_rerun()

elif menu=="Statisztika":
    st.write("üìä Foglal√°sok napi bont√°sban")
    st.bar_chart(bookings_df["D√°tum"].value_counts())

elif menu=="Be√°ll√≠t√°sok":
    st.header("‚öôÔ∏è Glob√°lis & napi eb√©dsz√ºnet & √°tnyergel√©si id≈ë")

    # 1) Mai foglal√°sok id≈ëvonalk√©nt
    df_ = bookings_df[bookings_df["D√°tum"]==sel_date].copy()
    if not df_.empty:
        df_["start"] = pd.to_datetime(df_["D√°tum"].astype(str)+" "+df_["Kezd√©s"])
        df_["end"]   = df_["start"] + pd.to_timedelta(df_["Id≈ëtartam (perc)"],unit="m")

    # 2) napi override vagy glob√°lis
    odf = lunch_over_df[lunch_over_df["D√°tum"]==sel_date]
    if not odf.empty:
        base_ls, base_ld = odf.iloc[0]["Kezdes"], odf.iloc[0]["HosszPerc"]
    else:
        base_ls, base_ld = st.session_state["lunch_start"], st.session_state["lunch_dur"]

    # 3) √©les slider + input
    ov_ls_dt = st.slider(
        "Napi eb√©dsz√ºnet kezdete",
        min_value=datetime.combine(sel_date,START_TIME),
        max_value=datetime.combine(sel_date,END_TIME),
        value=datetime.combine(sel_date,base_ls),
        format="HH:mm"
    )
    ov_ls = ov_ls_dt.time()
    ov_ld = st.number_input(
        "Napi eb√©dsz√ºnet hossza (perc)",
        min_value=0, max_value=180,
        value=int(base_ld), step=5
    )

    # 4) id≈ëvonal kirajzol√°sa
    lunch_bar = pd.DataFrame([{
        "type":"Eb√©dsz√ºnet",
        "start":datetime.combine(sel_date,ov_ls),
        "end":  datetime.combine(sel_date,ov_ls)+timedelta(minutes=int(ov_ld))
    }])
    timeline = pd.concat([df_.assign(type="Foglal√°s"), lunch_bar], ignore_index=True)
    chart = (
        alt.Chart(timeline)
           .mark_bar(size=20)
           .encode(x='start:T', x2='end:T', y=alt.value(0),
                   color='type:N', tooltip=['type','start:T','end:T'])
           .properties(height=80)
    )
    st.altair_chart(chart, use_container_width=True)
    st.markdown("---")

    # 5) ment√©s gombok
    col1,col2 = st.columns(2)
    with col1:
        if st.button("Ment√©s ‚Äî Napi override"):
            new_ov = lunch_over_df[lunch_over_df["D√°tum"]!=sel_date]
            new_ov = pd.concat([new_ov,
                pd.DataFrame([{"D√°tum":sel_date,"Kezdes":ov_ls,"HosszPerc":int(ov_ld)}])
            ], ignore_index=True)
            save_df_to_sheet(new_ov,"Eb√©dSzunet")
            st.success("Napi eb√©dsz√ºnet mentve."); safe_rerun()
    with col2:
        br = st.number_input(
            "√Åtnyergel√©si id≈ë (perc)",
            min_value=0, max_value=60,
            value=st.session_state["break_min"], step=1
        )
        if st.button("Ment√©s ‚Äî √Åtnyergel√©si id≈ë"):
            st.session_state["break_min"]=int(br)
            df = load_settings_df()
            df.loc[df["Key"]=="break_min","Value"]=str(int(br))
            save_settings_df(df)
            st.success("√Åtnyergel√©si id≈ë mentve."); safe_rerun()

    # 6) glob√°lis eb√©dsz√ºnet be√°ll√≠t√°sa
    st.markdown("### Glob√°lis eb√©dsz√ºnet")
    g1,g2 = st.columns(2)
    with g1:
        glob_ls = st.time_input("Alap eb√©dsz√ºnet kezdete", value=st.session_state["lunch_start"])
    with g2:
        glob_ld = st.number_input(
            "Alap eb√©dsz√ºnet hossza (perc)",
            min_value=0, max_value=180,
            value=st.session_state["lunch_dur"], step=5
        )
    if st.button("Ment√©s ‚Äî Glob√°lis eb√©dsz√ºnet"):
        st.session_state["lunch_start"]=glob_ls
        st.session_state["lunch_dur"]=glob_ld
        df = load_settings_df()
        df.loc[df["Key"]=="lunch_start","Value"]=glob_ls.strftime("%H:%M")
        df.loc[df["Key"]=="lunch_dur",    "Value"]=str(int(glob_ld))
        save_settings_df(df)
        st.success("Glob√°lis eb√©dsz√ºnet mentve."); safe_rerun()

elif menu=="Napt√°r":
    st.header("üìÖ Tiltott napok kezel√©se")
    bd = blocked
    st.write("Tiltott napok:", bd["D√°tum"].tolist())
    c1,c2 = st.columns(2)
    with c1: sb = st.date_input("Kezd√©s", value=date.today())
    with c2: eb = st.date_input("V√©ge",   value=date.today())
    if st.button("Tilt√°s ment√©se"):
        if eb<sb:
            st.error("V√©ge nem lehet kor√°bbi.")
        else:
            rng = pd.date_range(sb, eb).date
            new_df = pd.DataFrame({"D√°tum":rng})
            merged = pd.concat([bd,new_df],ignore_index=True)\
                       .drop_duplicates(subset=["D√°tum"])\
                       .sort_values("D√°tum")
            save_df_to_sheet(merged,"TiltottNapok")
            safe_rerun()

# ---- Kijelentkez√©s ----
if st.button("Kijelentkez√©s"):
    st.session_state.clear()
    safe_rerun()
